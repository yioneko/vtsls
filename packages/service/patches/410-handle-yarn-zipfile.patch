diff --git a/src/configuration/fileSchemes.ts b/src/configuration/fileSchemes.ts
index 9d54f0b..c77603c 100644
--- a/src/configuration/fileSchemes.ts
+++ b/src/configuration/fileSchemes.ts
@@ -20,6 +20,7 @@ export const officeScript = 'office-script';
 
 /** Used for code blocks in chat by vs code core */
 export const chatCodeBlock = 'vscode-chat-code-block';
+export const zipfile = 'zipfile';
 
 export function getSemanticSupportedSchemes() {
 	const alwaysSupportedSchemes = [
@@ -27,6 +28,7 @@ export function getSemanticSupportedSchemes() {
 		walkThroughSnippet,
 		vscodeNotebookCell,
 		chatCodeBlock,
+		zipfile
 	];
 
 	if (isWeb()) {
diff --git a/src/typescriptServiceClient.ts b/src/typescriptServiceClient.ts
index d196d68..40a1269 100644
--- a/src/typescriptServiceClient.ts
+++ b/src/typescriptServiceClient.ts
@@ -596,7 +596,7 @@ export default class TypeScriptServiceClient extends Disposable implements IType
 			: undefined;
 
 		const configureOptions: Proto.ConfigureRequestArguments = {
-			hostInfo: 'vscode',
+			hostInfo: (this.context as any).hostInfo || 'vscode',
 			preferences: {
 				providePrefixAndSuffixTextForRename: true,
 				allowRenameOfImportPath: true,
@@ -768,6 +768,10 @@ export default class TypeScriptServiceClient extends Disposable implements IType
 			return resource.fsPath;
 		}
 
+		if (resource.scheme === fileSchemes.zipfile) {
+			return resource.scheme + "://" + (resource.path.startsWith('/') ? resource.path : '/' + resource.path);
+		}
+
 		return (this.isProjectWideIntellisenseOnWebEnabled() ? '' : inMemoryResourcePrefix)
 			+ '/' + resource.scheme
 			+ '/' + (resource.authority || emptyAuthority)
@@ -816,6 +820,17 @@ export default class TypeScriptServiceClient extends Disposable implements IType
 				return this.bufferSyncSupport.toVsCodeResource(resource);
 			}
 		}
+		if (filepath.startsWith(fileSchemes.zipfile)) {
+			const uri = vscode.Uri.parse(filepath, false)
+			return new Proxy(uri, {
+				get(target, p) {
+					if (p === 'toString') {
+						return () => filepath;
+					}
+					return target[p as keyof vscode.Uri];
+				}
+			})
+		}
 
 		if (filepath.startsWith(inMemoryResourcePrefix)) {
 			const parts = filepath.match(/^\^\/([^\/]+)\/([^\/]*)\/(.+)$/);
