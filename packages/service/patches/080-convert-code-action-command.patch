diff --git a/src/languageFeatures/quickFix.ts b/src/languageFeatures/quickFix.ts
index f724cfd..68c3109 100644
--- a/src/languageFeatures/quickFix.ts
+++ b/src/languageFeatures/quickFix.ts
@@ -19,6 +19,7 @@ import FileConfigurationManager from './fileConfigurationManager';
 import { applyCodeActionCommands, getEditForCodeAction } from './util/codeAction';
 import { conditionalRegistration, requireSomeCapability } from './util/dependentRegistration';
 import { Expand, EditorChatFollowUp_Args, CompositeCommand, EditorChatFollowUp } from './util/copilot';
+import { commandsConverter } from '../../../share';
 
 type ApplyCodeActionCommand_args = {
 	readonly document: vscode.TextDocument;
@@ -59,7 +60,8 @@ class ApplyCodeActionCommand implements Command {
 }
 
 type ApplyFixAllCodeAction_args = {
-	readonly action: VsCodeFixAllCodeAction;
+  readonly tsAction: Proto.CodeFixAction;
+  readonly combinedResponse?: Proto.GetCombinedCodeFixResponse;
 };
 
 class ApplyFixAllCodeAction implements Command {
@@ -82,11 +84,11 @@ class ApplyFixAllCodeAction implements Command {
 			}
 		*/
 		this.telemetryReporter.logTelemetry('quickFixAll.execute', {
-			fixName: args.action.tsAction.fixName
+			fixName: args.tsAction.fixName
 		});
 
-		if (args.action.combinedResponse) {
-			await applyCodeActionCommands(this.client, args.action.combinedResponse.body.commands, nulToken);
+		if (args.combinedResponse) {
+			await applyCodeActionCommands(this.client, args.combinedResponse.body.commands, nulToken);
 		}
 	}
 }
@@ -311,9 +313,17 @@ class TypeScriptQuickFixProvider implements vscode.CodeActionProvider<VsCodeCode
 		};
 
 		const response = await this.client.execute('getCombinedCodeFix', arg, token);
-		if (response.type === 'response') {
+		if (response.type === "response") {
 			codeAction.combinedResponse = response;
-			codeAction.edit = typeConverters.WorkspaceEdit.fromFileCodeEdits(this.client, response.body.changes);
+			codeAction.edit = typeConverters.WorkspaceEdit.fromFileCodeEdits(
+				this.client,
+				response.body.changes
+			);
+			codeAction.command = {
+				command: ApplyFixAllCodeAction.ID,
+				arguments: [{ tsAction: codeAction.tsAction,combinedResponse: response } satisfies ApplyFixAllCodeAction_args],
+				title: "",
+			};
 		}
 
 		return codeAction;
@@ -356,7 +366,7 @@ class TypeScriptQuickFixProvider implements vscode.CodeActionProvider<VsCodeCode
 		codeAction.ranges = [diagnostic.range];
 		codeAction.command = {
 			command: ApplyCodeActionCommand.ID,
-			arguments: [{ action, diagnostic, document } satisfies ApplyCodeActionCommand_args],
+			arguments: commandsConverter[ApplyCodeActionCommand.ID].toArgs({ action: action, diagnostic, document } satisfies ApplyCodeActionCommand_args),
 			title: ''
 		};
 		actions.push(codeAction);
@@ -471,7 +481,7 @@ class TypeScriptQuickFixProvider implements vscode.CodeActionProvider<VsCodeCode
 		action.ranges = [diagnostic.range];
 		action.command = {
 			command: ApplyFixAllCodeAction.ID,
-			arguments: [{ action } satisfies ApplyFixAllCodeAction_args],
+			arguments: [{ tsAction, combinedResponse: action.combinedResponse } satisfies ApplyFixAllCodeAction_args],
 			title: ''
 		};
 		results.addFixAllAction(tsAction.fixId, action);
diff --git a/src/languageFeatures/refactor.ts b/src/languageFeatures/refactor.ts
index 0364b7f..1317cda 100644
--- a/src/languageFeatures/refactor.ts
+++ b/src/languageFeatures/refactor.ts
@@ -23,6 +23,7 @@ import { nulToken } from '../utils/cancellation';
 import FormattingOptionsManager from './fileConfigurationManager';
 import { CompositeCommand, EditorChatFollowUp } from './util/copilot';
 import { conditionalRegistration, requireSomeCapability } from './util/dependentRegistration';
+import { commandsConverter } from '../../../share';
 
 function toWorkspaceEdit(client: ITypeScriptServiceClient, edits: readonly Proto.FileCodeEdits[]): vscode.WorkspaceEdit {
 	const workspaceEdit = new vscode.WorkspaceEdit();
@@ -395,18 +396,12 @@ class InlinedCodeAction extends vscode.CodeAction {
 			// Disable renames in interactive playground https://github.com/microsoft/vscode/issues/75137
 			if (this.document.uri.scheme !== fileSchemes.walkThroughSnippet) {
 				this.command = {
-					command: CompositeCommand.ID,
-					title: '',
-					arguments: coalesce([
-						this.command,
-						{
+							title: '',
 							command: 'editor.action.rename',
-							arguments: [[
+							arguments: commandsConverter['editor.action.rename'].toArgs(...[[
 								this.document.uri,
 								typeConverters.Position.fromLocation(response.body.renameLocation)
-							]]
-						},
-					])
+							]] as const)
 				};
 			}
 		}
@@ -437,7 +432,7 @@ class MoveToFileCodeAction extends vscode.CodeAction {
 		this.command = {
 			title: action.description,
 			command: MoveToFileRefactorCommand.ID,
-			arguments: [{ action, document, range, trigger } satisfies MoveToFileRefactorCommand.Args]
+			arguments: commandsConverter[MoveToFileRefactorCommand.ID].toArgs(...[<MoveToFileRefactorCommand.Args>{ action, document, range, trigger }])
 		};
 	}
 }
@@ -453,7 +448,7 @@ class SelectCodeAction extends vscode.CodeAction {
 		this.command = {
 			title: info.description,
 			command: SelectRefactorCommand.ID,
-			arguments: [{ document, refactor: info, rangeOrSelection, trigger } satisfies SelectRefactorCommand.Args]
+			arguments: commandsConverter[SelectRefactorCommand.ID].toArgs(...[<SelectRefactorCommand.Args>{ action: this, document, refactor: info, rangeOrSelection, trigger }])
 		};
 	}
 }
