diff --git a/src/extension.ts b/src/extension.ts
index b4072aa..2bc47f7 100644
--- a/src/extension.ts
+++ b/src/extension.ts
@@ -3,25 +3,25 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import VsCodeTelemetryReporter from '@vscode/extension-telemetry';
+// import VsCodeTelemetryReporter from '@vscode/extension-telemetry';
 import * as fs from 'fs';
 import * as vscode from 'vscode';
 import { Api, getExtensionApi } from './api';
 import { CommandManager } from './commands/commandManager';
 import { registerBaseCommands } from './commands/index';
-import { ExperimentationTelemetryReporter, IExperimentationTelemetryReporter } from './experimentTelemetryReporter';
-import { ExperimentationService } from './experimentationService';
+// import { ExperimentationTelemetryReporter, IExperimentationTelemetryReporter } from './experimentTelemetryReporter';
+// import { ExperimentationService } from './experimentationService';
 import { createLazyClientHost, lazilyActivateClient } from './lazyClientHost';
 import { nodeRequestCancellerFactory } from './tsServer/cancellation.electron';
 import { NodeLogDirectoryProvider } from './tsServer/logDirectoryProvider.electron';
 import { ElectronServiceProcessFactory } from './tsServer/serverProcess.electron';
 import { DiskTypeScriptVersionProvider } from './tsServer/versionProvider.electron';
-import { JsWalkthroughState, registerJsNodeWalkthrough } from './ui/jsNodeWalkthrough.electron';
+// import { JsWalkthroughState, registerJsNodeWalkthrough } from './ui/jsNodeWalkthrough.electron';
 import { ActiveJsTsEditorTracker } from './utils/activeJsTsEditorTracker';
 import { ElectronServiceConfigurationProvider } from './utils/configuration.electron';
 import { onCaseInsensitiveFileSystem } from './utils/fileSystem.electron';
 import { Logger } from './utils/logger';
-import { getPackageInfo } from './utils/packageInfo';
+// import { getPackageInfo } from './utils/packageInfo';
 import { PluginManager } from './utils/plugins';
 import * as temp from './utils/temp.electron';
 
@@ -43,21 +43,21 @@ export function activate(
 	const activeJsTsEditorTracker = new ActiveJsTsEditorTracker();
 	context.subscriptions.push(activeJsTsEditorTracker);
 
-	const jsWalkthroughState = new JsWalkthroughState();
-	context.subscriptions.push(jsWalkthroughState);
-
-	let experimentTelemetryReporter: IExperimentationTelemetryReporter | undefined;
-	const packageInfo = getPackageInfo(context);
-	if (packageInfo) {
-		const { name: id, version, aiKey } = packageInfo;
-		const vscTelemetryReporter = new VsCodeTelemetryReporter(aiKey);
-		experimentTelemetryReporter = new ExperimentationTelemetryReporter(vscTelemetryReporter);
-		context.subscriptions.push(experimentTelemetryReporter);
-
-		// Currently we have no experiments, but creating the service adds the appropriate
-		// shared properties to the ExperimentationTelemetryReporter we just created.
-		new ExperimentationService(experimentTelemetryReporter, id, version, context.globalState);
-	}
+	// const jsWalkthroughState = new JsWalkthroughState();
+	// context.subscriptions.push(jsWalkthroughState);
+
+	// let experimentTelemetryReporter: IExperimentationTelemetryReporter | undefined;
+	// const packageInfo = getPackageInfo(context);
+	// if (packageInfo) {
+	// 	const { name: id, version, aiKey } = packageInfo;
+	// 	const vscTelemetryReporter = new VsCodeTelemetryReporter(aiKey);
+	// 	experimentTelemetryReporter = new ExperimentationTelemetryReporter(vscTelemetryReporter);
+	// 	context.subscriptions.push(experimentTelemetryReporter);
+	//
+	// 	// Currently we have no experiments, but creating the service adds the appropriate
+	// 	// shared properties to the ExperimentationTelemetryReporter we just created.
+	// 	new ExperimentationService(experimentTelemetryReporter, id, version, context.globalState);
+	// }
 
 	const logger = new Logger();
 
@@ -70,18 +70,18 @@ export function activate(
 		processFactory: new ElectronServiceProcessFactory(),
 		activeJsTsEditorTracker,
 		serviceConfigurationProvider: new ElectronServiceConfigurationProvider(),
-		experimentTelemetryReporter,
+		experimentTelemetryReporter: undefined,
 		logger,
 	}, item => {
 		onCompletionAccepted.fire(item);
 	});
 
 	registerBaseCommands(commandManager, lazyClientHost, pluginManager, activeJsTsEditorTracker);
-	registerJsNodeWalkthrough(commandManager, jsWalkthroughState);
+	// registerJsNodeWalkthrough(commandManager, jsWalkthroughState);
 
-	import('./task/taskProvider').then(module => {
-		context.subscriptions.push(module.register(lazyClientHost.map(x => x.serviceClient)));
-	});
+	// import('./task/taskProvider').then(module => {
+	// 	context.subscriptions.push(module.register(lazyClientHost.map(x => x.serviceClient)));
+	// });
 
 	import('./languageFeatures/tsconfig').then(module => {
 		context.subscriptions.push(module.register());
