diff --git a/src/languageFeatures/fileConfigurationManager.ts b/src/languageFeatures/fileConfigurationManager.ts
index 9b0c10a..f5578f2 100644
--- a/src/languageFeatures/fileConfigurationManager.ts
+++ b/src/languageFeatures/fileConfigurationManager.ts
@@ -52,10 +52,7 @@ export default class FileConfigurationManager extends Disposable {
 		document: vscode.TextDocument,
 		token: vscode.CancellationToken
 	): Promise<void> {
-		const formattingOptions = this.getFormattingOptions(document);
-		if (formattingOptions) {
-			return this.ensureConfigurationOptions(document, formattingOptions, token);
-		}
+			return this.ensureConfigurationOptions(document, undefined, token);
 	}
 
 	private getFormattingOptions(document: vscode.TextDocument): FormattingOptions | undefined {
@@ -72,7 +69,7 @@ export default class FileConfigurationManager extends Disposable {
 
 	public async ensureConfigurationOptions(
 		document: vscode.TextDocument,
-		options: FormattingOptions,
+		options: FormattingOptions | undefined,
 		token: vscode.CancellationToken
 	): Promise<void> {
 		const file = this.client.toOpenTsFilePath(document);
@@ -111,14 +108,9 @@ export default class FileConfigurationManager extends Disposable {
 		document: vscode.TextDocument,
 		token: vscode.CancellationToken,
 	): Promise<void> {
-		const formattingOptions = this.getFormattingOptions(document);
-		if (!formattingOptions) {
-			return;
-		}
-
 		const args: Proto.ConfigureRequestArguments = {
 			file: undefined /*global*/,
-			...this.getFileOptions(document, formattingOptions),
+			...this.getFileOptions(document),
 		};
 		await this.client.execute('configure', args, token);
 	}
@@ -129,7 +121,7 @@ export default class FileConfigurationManager extends Disposable {
 
 	private getFileOptions(
 		document: vscode.TextDocument,
-		options: FormattingOptions
+		options?: FormattingOptions
 	): FileConfiguration {
 		return {
 			formatOptions: this.getFormatOptions(document, options),
@@ -139,18 +131,25 @@ export default class FileConfigurationManager extends Disposable {
 
 	private getFormatOptions(
 		document: vscode.TextDocument,
-		options: FormattingOptions
+		options?: FormattingOptions
 	): Proto.FormatCodeSettings {
 		const config = vscode.workspace.getConfiguration(
 			isTypeScriptDocument(document) ? 'typescript.format' : 'javascript.format',
 			document.uri);
+		const tsEditorConfig = vscode.workspace.getConfiguration(
+			isTypeScriptDocument(document) ? "vtsls.typescript.format" : "vtsls.javascript.format",
+			document.uri
+		);
 
 		return {
-			tabSize: options.tabSize,
-			indentSize: options.tabSize,
-			convertTabsToSpaces: options.insertSpaces,
+			tabSize: options?.tabSize ?? tsEditorConfig.get("tabSize"),
+			baseIndentSize: tsEditorConfig.get("baseIndentSize"),
+			indentSize: options?.tabSize ?? tsEditorConfig.get("indentSize"),
+			indentStyle: tsEditorConfig.get("indentStyle"),
+			trimTrailingWhitespace: tsEditorConfig.get("trimTrailingWhitespace"),
+			convertTabsToSpaces: options?.insertSpaces ?? tsEditorConfig.get("convertTabsToSpaces"),
 			// We can use \n here since the editor normalizes later on to its line endings.
-			newLineCharacter: '\n',
+			newLineCharacter: tsEditorConfig.get("newLineCharacter") ?? '\n',
 			insertSpaceAfterCommaDelimiter: config.get<boolean>('insertSpaceAfterCommaDelimiter'),
 			insertSpaceAfterConstructor: config.get<boolean>('insertSpaceAfterConstructor'),
 			insertSpaceAfterSemicolonInForStatements: config.get<boolean>('insertSpaceAfterSemicolonInForStatements'),
